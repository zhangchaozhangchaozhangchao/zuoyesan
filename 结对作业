package com.atschool.circlelinkedlist;
public class Josepfu {
    public static void main(String[] args) {
        CircleSingleLinkedList circleSingleLinkedList = new CircleSingleLinkedList();
        circleSingleLinkedList.addBoy(5);
        circleSingleLinkedList.showBoy();
        //测试一把小孩出圈顺序是否正确
        circleSingleLinkedList.curBoy(1,2,5);

    }
}
class  CircleSingleLinkedList {
    //创建一个first节点，当前没有编号
    private Boy first =null;
    //添加小孩节点，构建一个环形的链表
    public void addBoy (int nums){
        if(nums <1 ){
            System.out.println("nums的值不正确");
            return;

        }

        Boy curBoy =null;//辅助指针，帮助构建环形链表
        //使用for来创建我们的环形链表
        for (int i = 1; i <= nums; i++) {
             //根据小孩编号，创建小孩节点
            Boy boy = new Boy(i);
            //如果是第一个小孩
            if(i ==1){
                first =boy;
                first.setNext(first);
                curBoy =first ; //让curBoy指向第一个小孩

            }else {
                curBoy.setNext(boy);
                boy.setNext(first);
                curBoy =boy;
            }

        }


    }
    // 遍历当前的环形链表
    public void showBoy(){
        //判断链表是否为空
        if(first == null){
            System.out.println("没有任何小孩");
            return;

        }
        //因为first不能动，因此我们仍然使用一个辅助指针完成遍历；
        Boy curBoy =first;
        while(true){
            System.out.printf("小孩的编号%d\n",curBoy.getNo());
            if(curBoy.getNext() == first){
                break;
            }
            curBoy =curBoy.getNext();//curBoy后移

        }

    }
    //根据用户的输入，计算出小孩的出圈顺序
    public void curBoy (int startNo,int countNum,int nums){
        //先对数据进行校核
        if(first == null || startNo<1 ||startNo >nums){
            System.out.println("参数输入有误，请重新输入");
            return;

        }
        //创建辅助指针，帮助完成小孩出圈
        Boy helper =first;
        //需要创建一个辅助指针helper,事先应该指向环形链表的最后这个节点
        while(true){
            if(helper.getNext() == first){
                break;
            }
            helper =helper.getNext();
        }
        //小孩报数前，先让first和helper移动k-1次
        for(int j=0;j<startNo -1;j++){
            first =first.getNext();
            helper =helper.getNext();

        }
        //当小孩报数时，让first和helper指针同时移动m-1次，然后出圈；
        while(true){
            if(helper == first){ //说明圈中只有一个节点
                break;

            }
            //让 first和helper指针同时移动countNum -1
            for(int j =0;j<countNum -1;j++){
                first =first.getNext();
                helper =helper.getNext();
            }
            //这时first指向的节点，就是要出圈的小孩的节点；
            System.out.printf("小孩%d出圈\n",first.getNo());
            //这时将first指向的小孩节点出圈
            first=first.getNext();
            helper.setNext(first);


        }
        System.out.printf("最后留在圈中的小孩编号%d\n",first.getNo());


    }

}



class Boy{
    private int no; //编号
    private  Boy next;//指向下一个节点，默认null
    public Boy (int no){
        this.no = no;

    }
    public int getNo(){
        return no;
    }
    public void setNo(int no){
        this.no = no;
    }
    public Boy getNext(){
        return next;
    }
    public void setNext(Boy next){
        this.next =next;

    }

}
